package com.haulmont.testtask.database;

import java.sql.*;
import java.util.ResourceBundle;

public class DatabaseHelper {

    public static Connection con = null;

    public DatabaseHelper() {
    }

    public static Connection getConnection() {
        try{
            if (con == null) {
                ResourceBundle resource = ResourceBundle.getBundle("database");
                String driver = resource.getString("db.driver");
                String url = resource.getString("db.url");
                String username = resource.getString("db.username");
                String password = resource.getString("db.password");
                Class.forName(driver);
                con = DriverManager.getConnection(url, username, password);
                initDatabase();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }

        return con;
    }

//    public static void closeConnection() throws SQLException {
//        if (con != null && !con.isClosed()) {
//            con.close();
//        }
//    }

    private static void initDatabase() throws SQLException {
        try (Statement st = con.createStatement()) {
            if (!isExistTableFromDatabase("BANK")) {
                st.execute("create table BANK (" +
                        "ID bigint generated by default as identity" +
                        "(start with 1, increment by 1) not null primary key," +
                        "NAME varchar(255) not null,);");

                st.executeUpdate("INSERT INTO BANK(NAME) VALUES ('СБЕР');");
                st.executeUpdate("INSERT INTO BANK(NAME) VALUES ('АЛЬФА-БАНК');");
                st.executeUpdate("INSERT INTO BANK(NAME) VALUES ('ПРОМСВЯЗЬБАНК');");
                st.executeUpdate("INSERT INTO BANK(NAME) VALUES ('РОСТЕХБАНК');");
                st.executeUpdate("INSERT INTO BANK(NAME) VALUES ('НОВИКОМ-БАНК');");
            }


            if (!isExistTableFromDatabase("CLIENT")) {
                st.execute("create table CLIENT (" +
                        "ID bigint generated by default as identity" +
                        "(start with 1, increment by 1) not null primary key," +
                        "FIO varchar(255) not null," +
                        "BANK_ID bigint," +
                        "constraint FK_CLIENT_BANK foreign key (BANK_ID) references BANK(ID) on delete restrict,\n" +
                        "PHONE_NUMBER varchar(255) not null," +
                        "EMAIL varchar(255) not null," +
                        "PASSPORT varchar(255) not null" +
                        ");");

                st.executeUpdate("INSERT INTO CLIENT(FIO, BANK_ID, PHONE_NUMBER, EMAIL ,PASSPORT ) VALUES\n" +
                        "('Ленин Владимир Ильич', 1, '89371458725', 'firstaftermarx@gmail.com' , '11254');");
                st.executeUpdate("INSERT INTO CLIENT(FIO, BANK_ID, PHONE_NUMBER, EMAIL ,PASSPORT ) VALUES\n" +
                        "('Троцкий Лейб Давидович', 2, '89371458725', 'ihatekoba@gmail.com' , '11254');");
                st.executeUpdate("INSERT INTO CLIENT(FIO, BANK_ID, PHONE_NUMBER, EMAIL ,PASSPORT ) VALUES\n" +
                        "('Микоян Анастас Иванович', 3, '89371458725', 'iamsausage@gmail.com' , '11254');");
                st.executeUpdate("INSERT INTO CLIENT(FIO, BANK_ID, PHONE_NUMBER, EMAIL ,PASSPORT ) VALUES\n" +
                        "('Орджоникидзе Серго Константинович', 4, '89371458725', 'firstcomsergo@gmail.com' , '11254');");
                st.executeUpdate("INSERT INTO CLIENT(FIO, BANK_ID, PHONE_NUMBER, EMAIL ,PASSPORT ) VALUES\n" +
                        "('Сталин Иосиф Виссарионович', 5, '89371458725', 'ihatetrotsky@gmail.com' , '11254');");
            }


            if (!isExistTableFromDatabase("CREDIT")) {
                st.execute("create table CREDIT (" +
                        "ID bigint generated by default as identity" +
                        "(start with 1, increment by 1) not null primary key," +
                        "BANK_ID bigint not null," +
                        "LIMIT float not null," +
                        "INTEREST_RATE float not null," +
                        "constraint FK_CREDIT_BANK foreign key (BANK_ID) references BANK(ID) on delete restrict,);");

                st.executeUpdate("INSERT INTO CREDIT(BANK_ID, LIMIT, INTEREST_RATE) " +
                        "VALUES (1, 50000, 3.5);");
                st.executeUpdate("INSERT INTO CREDIT(BANK_ID, LIMIT, INTEREST_RATE) " +
                        "VALUES (2, 70000, 3.3);");
                st.executeUpdate("INSERT INTO CREDIT(BANK_ID, LIMIT, INTEREST_RATE) " +
                        "VALUES (3, 70000, 3.8);");
                st.executeUpdate("INSERT INTO CREDIT(BANK_ID, LIMIT, INTEREST_RATE) " +
                        "VALUES (4, 120000, 4);");
                st.executeUpdate("INSERT INTO CREDIT(BANK_ID, LIMIT, INTEREST_RATE) " +
                        "VALUES (5, 150000, 2);");

            }

            if (!isExistTableFromDatabase("OFFER")) {
                st.execute("create table OFFER (" +
                        "ID bigint generated by default as identity" +
                        "(start with 1, increment by 1) not null primary key," +
                        "CLIENT_ID bigint not null," +
                        "constraint FK_OFFER_CLIENT foreign key (CLIENT_ID) references CLIENT(ID) on delete restrict,\n" +
                        "CREDIT_ID bigint not null," +
                        "constraint FK_OFFER_CREDIT foreign key (CREDIT_ID) references CREDIT(ID) on delete restrict,\n" +
                        "CREDIT_AMOUNT float not null,);");

                st.executeUpdate("INSERT INTO OFFER(CLIENT_ID, CREDIT_ID, CREDIT_AMOUNT) " +
                        "VALUES (1, 1, 15000);");
                st.executeUpdate("INSERT INTO OFFER(CLIENT_ID, CREDIT_ID, CREDIT_AMOUNT) " +
                        "VALUES (2, 2, 1000);");
                st.executeUpdate("INSERT INTO OFFER(CLIENT_ID, CREDIT_ID, CREDIT_AMOUNT) " +
                        "VALUES (3, 3, 18000);");
                st.executeUpdate("INSERT INTO OFFER(CLIENT_ID, CREDIT_ID, CREDIT_AMOUNT) " +
                        "VALUES (4, 4, 40000);");
                st.executeUpdate("INSERT INTO OFFER(CLIENT_ID, CREDIT_ID, CREDIT_AMOUNT) " +
                        "VALUES (5, 5, 25000);");

            }



            if (!isExistTableFromDatabase("SCHEDULE")) {
                st.execute("create table SCHEDULE (" +
                        "ID bigint generated by default as identity" +
                        "(start with 1, increment by 1) not null primary key," +
                        "OFFER_ID bigint not null," +
                        "constraint FK_SCHEDULE_CLIENT foreign key (OFFER_ID) references OFFER(ID) on delete restrict,\n" +
                        "DATE_PAYMENT date not null," +
                        "AMOUNT_PAYMENT float not null," +
                        "AMOUNT_PAYMENT_PERCENT float not null);");

                st.executeUpdate("INSERT INTO SCHEDULE(OFFER_ID, DATE_PAYMENT, AMOUNT_PAYMENT,AMOUNT_PAYMENT_PERCENT ) " +
                        "VALUES (1, '2021-07-05', 5000, 500);");
                st.executeUpdate("INSERT INTO SCHEDULE(OFFER_ID, DATE_PAYMENT, AMOUNT_PAYMENT,AMOUNT_PAYMENT_PERCENT ) " +
                        "VALUES (2, '2021-07-05', 5000, 500);");
                st.executeUpdate("INSERT INTO SCHEDULE(OFFER_ID, DATE_PAYMENT, AMOUNT_PAYMENT,AMOUNT_PAYMENT_PERCENT ) " +
                        "VALUES (3, '2021-07-05', 5000, 500);");
                st.executeUpdate("INSERT INTO SCHEDULE(OFFER_ID, DATE_PAYMENT, AMOUNT_PAYMENT,AMOUNT_PAYMENT_PERCENT ) " +
                        "VALUES (4, '2021-07-05', 5000, 500);");
                st.executeUpdate("INSERT INTO SCHEDULE(OFFER_ID, DATE_PAYMENT, AMOUNT_PAYMENT,AMOUNT_PAYMENT_PERCENT ) " +
                        "VALUES (5, '2021-07-05', 5000, 500);");
            }


        }
    }

    private static boolean isExistTableFromDatabase(String tableName) throws SQLException {
        boolean isExists = false;
        try (ResultSet rs = con.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tn = rs.getString("TABLE_NAME");
                if (tn != null && tn.equals(tableName)) {
                    isExists = true;
                    break;
                }
            }
        }
        return isExists;
    }


}
